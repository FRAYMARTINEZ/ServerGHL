{"ast":null,"code":"export const baseUrl = 'https://podosys.piesalud.com';\n\nfunction userFormat(user) {\n  let userToSend = {\n    first_name: user.firstName,\n    second_name: user.secondName,\n    first_surname: user.firstSurname,\n    second_surname: user.secondSurname,\n    cedula: user.cedula,\n    email: user.email,\n    gender: user.sex,\n    dob: user.selectedDate,\n    cellphone: user.phoneNumber\n  };\n  return userToSend;\n}\n\nfunction podoscopeFormat(inObj) {\n  let formatedOutput = {\n    imgFormat: {\n      sid: localStorage.getItem('sid'),\n      id: '',\n      angulo_i: inObj.imgData.extra.leftAngle || null,\n      angulo_d: inObj.imgData.extra.rightAngle || null,\n      // save image id after @. Doesnt interfere with base64 encoding\n      u_x_d: inObj.imgData.data.right.lineX || null,\n      u_x_i: inObj.imgData.data.left.lineX || null,\n      x_i: inObj.imgData.data.left.point ? inObj.imgData.data.left.point.x : null,\n      x_d: inObj.imgData.data.right.point ? inObj.imgData.data.right.point.x : null,\n      y_i: inObj.imgData.data.left.point ? inObj.imgData.data.left.point.y : null,\n      y_d: inObj.imgData.data.right.point ? inObj.imgData.data.right.point.y : null,\n      efp_id: inObj.user.eid,\n      traza: JSON.stringify(inObj.imgData.data.free.path),\n      imagen: inObj.imgData.image + '@' + inObj.imId\n    },\n    examFormat: {\n      entryPoint: 'save_efp',\n      sid: localStorage.getItem('sid'),\n      thi: inObj.feet.left.footprintType,\n      thd: inObj.feet.right.footprintType,\n      tpi: inObj.feet.left.footType,\n      tpd: inObj.feet.right.footType,\n      tti: inObj.feet.left.heelType,\n      ttd: inObj.feet.right.heelType,\n      obs: inObj.observations.defaultValue,\n      tp: inObj.shoeSize,\n      pid: inObj.user.pid,\n      id: inObj.user.eid // exam id\n\n    }\n  };\n  return formatedOutput;\n}\n\nfunction genericPost(inObj, callback, onError, objFormat, endpoint) {\n  let outObj = objFormat(inObj);\n  fetch(endpoint, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(outObj)\n  }).then(response => {\n    if (!response.ok) {\n      console.log('ERROR could not make post request.');\n      onError();\n    }\n  }).then(() => callback()).catch(error => {\n    onError();\n    console.log(error);\n  });\n}\n\nexport function genericGet(url, callback, onError, withSID = true) {\n  let finalUrl = url;\n\n  if (withSID) {\n    const sid = localStorage.getItem('sid');\n    finalUrl = `${url}&sid=${sid}`;\n  }\n\n  fetch(finalUrl, {\n    method: 'GET'\n  }).then(response => {\n    if (!response.ok) {\n      console.log('ERROR could not make get request.');\n      onError();\n    }\n\n    return response.json();\n  }).then(data => {\n    if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\n      onError({\n        type: 'session_expired',\n        error: data.rta\n      });\n    } else {\n      callback(data);\n    }\n  }).catch(error => {\n    onError({\n      type: 'fetch',\n      error\n    });\n  });\n}\nexport function postUser(user, callback, onError) {\n  genericPost(user, callback, onError, userFormat, '/users');\n}\nexport function postPodImage(inObj, examCallback, examOnError, imageCallback, imageOnError) {\n  // genericPost(inObj, callback, onError, podoscopeFormat, '/podoscope');\n  let correctFormat = podoscopeFormat(inObj); //exam stuff\n\n  console.log('saving exam...');\n  genericPostUrlParams(baseUrl + '/index.php', correctFormat.examFormat, data => {\n    console.log('Sucessfully updated exam');\n    console.log(data);\n    examCallback(data);\n  }, e => {\n    examOnError(e);\n  }); //image stuff\n\n  console.log('saving image...');\n  saveImage(correctFormat.imgFormat, data => {\n    imageCallback(data);\n  }, e => {\n    imageOnError(e);\n  }); // console.log(correctFormat.imgFormat.imagen);\n  // genericPostUrlParams(baseUrl + '/index.php',\n  //   correctFormat.imgFormat,\n  //   (data) => {\n  //     console.log('Sucessfully saved image');\n  //     console.log(data);\n  //     callback(data);\n  //   },\n  //   (e) => {\n  //     onError(e);\n  //   });\n}\n\nfunction saveImage(imageObj, callback, onError) {\n  let saveImgURL = baseUrl;\n  saveImgURL += '/index.php?entryPoint=save_img';\n  console.log('sending body to save image: ', JSON.stringify(imageObj));\n  fetch(saveImgURL, {\n    method: 'POST',\n    body: JSON.stringify(imageObj)\n  }).then(response => {\n    console.log('create image response:');\n    console.log(response);\n    return response.text();\n  }).then(data => {\n    if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\n      onError({\n        type: 'session_expired',\n        error: data.rta\n      });\n    } else {\n      console.log('Succesfully saved image: ');\n      console.log(data);\n      callback(data);\n    }\n  }).catch(error => {\n    onError({\n      type: 'fetch',\n      error\n    });\n  });\n}\n\nexport function genericPostUrlParams(baseUrl, inObj, callback, onError) {\n  let completeUrl = baseUrl + '?';\n  let first = true;\n\n  for (const prop in inObj) {\n    if (!first) {\n      completeUrl += '&';\n    }\n\n    completeUrl += prop + '=' + inObj[prop];\n    first = false;\n  } // console.log('the complete post url:',completeUrl);\n\n\n  fetch(completeUrl, {\n    method: 'POST'\n  }).then(response => response.text()).then(data => {\n    if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\n      onError({\n        type: 'session_expired',\n        error: data.rta\n      });\n    } else {\n      callback(data);\n    }\n  }).catch(error => {\n    onError({\n      type: 'fetch',\n      error\n    });\n  });\n}","map":{"version":3,"sources":["D:/podoscope/src/utils/requestsManager.js"],"names":["baseUrl","userFormat","user","userToSend","first_name","firstName","second_name","secondName","first_surname","firstSurname","second_surname","secondSurname","cedula","email","gender","sex","dob","selectedDate","cellphone","phoneNumber","podoscopeFormat","inObj","formatedOutput","imgFormat","sid","localStorage","getItem","id","angulo_i","imgData","extra","leftAngle","angulo_d","rightAngle","u_x_d","data","right","lineX","u_x_i","left","x_i","point","x","x_d","y_i","y","y_d","efp_id","eid","traza","JSON","stringify","free","path","imagen","image","imId","examFormat","entryPoint","thi","feet","footprintType","thd","tpi","footType","tpd","tti","heelType","ttd","obs","observations","defaultValue","tp","shoeSize","pid","genericPost","callback","onError","objFormat","endpoint","outObj","fetch","method","headers","body","then","response","ok","console","log","catch","error","genericGet","url","withSID","finalUrl","json","rta","type","postUser","postPodImage","examCallback","examOnError","imageCallback","imageOnError","correctFormat","genericPostUrlParams","e","saveImage","imageObj","saveImgURL","text","completeUrl","first","prop"],"mappings":"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","sourcesContent":["export const baseUrl = 'https://podosys.piesalud.com';\r\n\r\nfunction userFormat(user) {\r\n  let userToSend = {\r\n    first_name: user.firstName,\r\n    second_name: user.secondName,\r\n    first_surname: user.firstSurname,\r\n    second_surname: user.secondSurname,\r\n    cedula: user.cedula,\r\n    email: user.email,\r\n    gender: user.sex,\r\n    dob: user.selectedDate,\r\n    cellphone: user.phoneNumber\r\n  };\r\n  return userToSend;\r\n}\r\n\r\nfunction podoscopeFormat(inObj) {\r\n  let formatedOutput = {\r\n\r\n    imgFormat: {\r\n\r\n      sid: localStorage.getItem('sid'),\r\n      id: '',\r\n      angulo_i: inObj.imgData.extra.leftAngle || null,\r\n      angulo_d: inObj.imgData.extra.rightAngle || null,\r\n      // save image id after @. Doesnt interfere with base64 encoding\r\n      u_x_d: inObj.imgData.data.right.lineX || null,\r\n      u_x_i: inObj.imgData.data.left.lineX || null,\r\n      x_i: inObj.imgData.data.left.point ? inObj.imgData.data.left.point.x : null,\r\n      x_d: inObj.imgData.data.right.point ? inObj.imgData.data.right.point.x : null,\r\n      y_i: inObj.imgData.data.left.point ? inObj.imgData.data.left.point.y : null,\r\n      y_d: inObj.imgData.data.right.point ? inObj.imgData.data.right.point.y : null,\r\n      efp_id: inObj.user.eid,\r\n      traza: JSON.stringify(inObj.imgData.data.free.path),\r\n      imagen: inObj.imgData.image + '@' + inObj.imId,\r\n\r\n    },\r\n\r\n    examFormat: {\r\n\r\n      entryPoint: 'save_efp',\r\n      sid: localStorage.getItem('sid'),\r\n      thi: inObj.feet.left.footprintType,\r\n      thd: inObj.feet.right.footprintType,\r\n      tpi: inObj.feet.left.footType,\r\n      tpd: inObj.feet.right.footType,\r\n      tti: inObj.feet.left.heelType,\r\n      ttd: inObj.feet.right.heelType,\r\n      obs: inObj.observations.defaultValue,\r\n      tp: inObj.shoeSize,\r\n      pid: inObj.user.pid,\r\n      id: inObj.user.eid // exam id\r\n\r\n    }\r\n\r\n\r\n  };\r\n  return formatedOutput;\r\n}\r\n\r\nfunction genericPost(inObj, callback, onError, objFormat, endpoint) {\r\n  let outObj = objFormat(inObj);\r\n\r\n  fetch(endpoint, {\r\n    method: 'post',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(outObj)\r\n  })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        console.log('ERROR could not make post request.');\r\n        onError();\r\n      }\r\n    })\r\n    .then(() => callback())\r\n    .catch(error => { onError(); console.log(error); });\r\n}\r\n\r\nexport function genericGet(url, callback, onError, withSID = true) {\r\n  let finalUrl = url;\r\n  if (withSID) {\r\n    const sid = localStorage.getItem('sid');\r\n    finalUrl = `${url}&sid=${sid}`;\r\n  }\r\n\r\n  fetch(finalUrl, { method: 'GET' })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        console.log('ERROR could not make get request.');\r\n        onError();\r\n      }\r\n      return response.json();\r\n    })\r\n    .then(data => {\r\n      if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\r\n        onError({ type: 'session_expired', error: data.rta });\r\n      } else {\r\n        callback(data);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      onError({ type: 'fetch', error });\r\n    });\r\n}\r\n\r\nexport function postUser(user, callback, onError) {\r\n  genericPost(user, callback, onError, userFormat, '/users');\r\n}\r\n\r\nexport function postPodImage(inObj, examCallback, examOnError,imageCallback,imageOnError) {\r\n  // genericPost(inObj, callback, onError, podoscopeFormat, '/podoscope');\r\n\r\n  let correctFormat = podoscopeFormat(inObj);\r\n\r\n  //exam stuff\r\n  console.log('saving exam...')\r\n  genericPostUrlParams(baseUrl + '/index.php',\r\n    correctFormat.examFormat,\r\n    (data) => {\r\n      console.log('Sucessfully updated exam');\r\n      console.log(data);\r\n      examCallback(data);\r\n    },\r\n    (e) => {\r\n      examOnError(e);\r\n    });\r\n\r\n  //image stuff\r\n\r\n  console.log('saving image...')\r\n  saveImage(correctFormat.imgFormat, \r\n    (data) => { \r\n      imageCallback(data);\r\n    }, \r\n    (e) => {\r\n      imageOnError(e);\r\n     })\r\n\r\n\r\n  // console.log(correctFormat.imgFormat.imagen);\r\n  // genericPostUrlParams(baseUrl + '/index.php',\r\n  //   correctFormat.imgFormat,\r\n  //   (data) => {\r\n  //     console.log('Sucessfully saved image');\r\n  //     console.log(data);\r\n  //     callback(data);\r\n  //   },\r\n  //   (e) => {\r\n  //     onError(e);\r\n  //   });\r\n}\r\n\r\nfunction saveImage(imageObj, callback, onError) {\r\n  let saveImgURL = baseUrl;\r\n  saveImgURL += '/index.php?entryPoint=save_img';\r\n\r\n  console.log('sending body to save image: ', JSON.stringify(imageObj))\r\n\r\n  fetch(saveImgURL, {\r\n    method: 'POST',\r\n    body: JSON.stringify(imageObj)\r\n  })\r\n    .then((response) => {\r\n      console.log('create image response:');\r\n      console.log(response);\r\n      return response.text();\r\n    })\r\n    .then(data => {\r\n      if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\r\n        onError({ type: 'session_expired', error: data.rta });\r\n      } else {\r\n        console.log('Succesfully saved image: ')\r\n        console.log(data);\r\n        callback(data);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      onError({ type: 'fetch', error });\r\n    });\r\n\r\n}\r\n\r\nexport function genericPostUrlParams(baseUrl, inObj, callback, onError) {\r\n  let completeUrl = baseUrl + '?';\r\n\r\n  let first = true;\r\n  for (const prop in inObj) {\r\n    if (!first) {\r\n      completeUrl += '&';\r\n    }\r\n\r\n    completeUrl += prop + '=' + inObj[prop];\r\n    first = false;\r\n  }\r\n\r\n  // console.log('the complete post url:',completeUrl);\r\n\r\n  fetch(completeUrl, {\r\n    method: 'POST',\r\n  })\r\n    .then((response) => response.text())\r\n    .then(data => {\r\n      if (data.rta === 'La sesion es invalida , por favor verificar credenciales') {\r\n        onError({ type: 'session_expired', error: data.rta });\r\n      } else {\r\n        callback(data);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      onError({ type: 'fetch', error });\r\n    });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}